from PyQt5 import QtWidgets, QtGui, QtCore
import pandas as pd
import sys

class Overview(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PTD/YTD Results - USA")
        self.setGeometry(200, 100, 1150, 750)
        self.setStyleSheet("""
            QWidget {
                background-color: #f4f6f8;
                font-family: Segoe UI;
                font-size: 14px;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                background-color: white;
                margin-top: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 5px 10px;
                color: white;
                background-color: #0078D7;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                font-size: 15px;
            }
            QPushButton {
                background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #0078D7, stop:1 #005a9e);
                color: white;
                font-weight: bold;
                padding: 10px 18px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #005a9e;
            }
            QLineEdit {
                background: #ffffff;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 5px;
            }
            QTableWidget {
                background-color: white;
                border: 1px solid #ccc;
                border-radius: 6px;
                gridline-color: #e0e0e0;
            }
            QHeaderView::section {
                background-color: #0078D7;
                color: white;
                font-weight: bold;
                padding: 6px;
                border: none;
            }
        """)

        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # ----- Title -----
        header = QtWidgets.QLabel("PTD/YTD Results - USA")
        header.setFont(QtGui.QFont("Segoe UI", 28, QtGui.QFont.Bold))
        header.setAlignment(QtCore.Qt.AlignCenter)
        header.setStyleSheet("color: #2d3748;")
        layout.addWidget(header)

        subheader = QtWidgets.QLabel("Data Entry & Transaction Overview Dashboard")
        subheader.setFont(QtGui.QFont("Segoe UI", 13))
        subheader.setAlignment(QtCore.Qt.AlignCenter)
        subheader.setStyleSheet("color: #555; margin-bottom: 15px;")
        layout.addWidget(subheader)

        # ----- Client Information -----
        client_info = QtWidgets.QGroupBox("Client Information")
        client_layout = QtWidgets.QFormLayout()
        client_layout.addRow("Client Number:", QtWidgets.QLineEdit())
        client_layout.addRow("Company Name:", QtWidgets.QLineEdit())
        client_layout.addRow("Country:", QtWidgets.QLineEdit())
        client_layout.addRow("Language:", QtWidgets.QLineEdit())
        client_info.setLayout(client_layout)
        layout.addWidget(client_info)

        # ----- Client Contact -----
        contact_info = QtWidgets.QGroupBox("Client Contact")
        contact_layout = QtWidgets.QFormLayout()
        contact_layout.addRow("Name:", QtWidgets.QLineEdit())
        contact_layout.addRow("Phone Number:", QtWidgets.QLineEdit())
        contact_layout.addRow("Email:", QtWidgets.QLineEdit())
        contact_layout.addRow("ADP Contact:", QtWidgets.QLineEdit())
        contact_info.setLayout(contact_layout)
        layout.addWidget(contact_info)

        # ----- Period -----
        period_info = QtWidgets.QGroupBox("Period")
        period_layout = QtWidgets.QFormLayout()
        period_layout.addRow("Date Received:", QtWidgets.QLineEdit())
        period_layout.addRow("Date Processed:", QtWidgets.QLineEdit())
        period_info.setLayout(period_layout)
        layout.addWidget(period_info)

        # ----- Transaction Overview -----
        trans_info = QtWidgets.QGroupBox("Transaction Overview")
        trans_layout = QtWidgets.QVBoxLayout()

        self.table = QtWidgets.QTableWidget(0, 2)  # 2 columns: Record Type, Record Count
        self.table.setHorizontalHeaderLabels(["Record Type", "Record Count"])
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.verticalHeader().setVisible(False)

        # Update total records when table changes
        self.table.itemChanged.connect(self.update_total_records)

        trans_layout.addWidget(self.table)

        # Total Records Display
        self.total_label = QtWidgets.QLabel("Total Records: 0")
        self.total_label.setFont(QtGui.QFont("Segoe UI", 12, QtGui.QFont.Bold))
        self.total_label.setStyleSheet("color: #0078D7; padding-top: 5px;")
        trans_layout.addWidget(self.total_label)

        trans_info.setLayout(trans_layout)
        layout.addWidget(trans_info)

        # ----- Buttons -----
        btn_layout = QtWidgets.QHBoxLayout()
        test_checkbox = QtWidgets.QCheckBox("Test Run (No Update)")
        btn_layout.addWidget(test_checkbox)
        btn_layout.addStretch()

        upload_btn = QtWidgets.QPushButton("Create Upload File")
        import_btn = QtWidgets.QPushButton("Import Upload File")
        excel_btn = QtWidgets.QPushButton("Activate Excel Sheet")
        excel_btn.clicked.connect(self.load_excel_data)  # Link Excel button to function

        btn_layout.addWidget(upload_btn)
        btn_layout.addWidget(import_btn)
        btn_layout.addWidget(excel_btn)
        layout.addLayout(btn_layout)

    def update_total_records(self):
        """Recalculate total from Record Count column."""
        total = 0
        for row in range(self.table.rowCount()):
            try:
                count = int(self.table.item(row, 1).text())
                total += count
            except:
                pass  # Ignore if cell is empty or invalid
        self.total_label.setText(f"Total Records: {total}")

    def load_excel_data(self):
        """Open Excel and load data into the table."""
        path, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Open Excel File", "", "Excel Files (*.xlsx *.xls)")
        if path:
            df = pd.read_excel(path)
            if not {"Record Type", "Record Count"}.issubset(df.columns):
                QtWidgets.QMessageBox.warning(self, "Error", "Excel must contain 'Record Type' and 'Record Count' columns.")
                return

            self.table.setRowCount(0)  # Clear table
            for _, row in df.iterrows():
                row_pos = self.table.rowCount()
                self.table.insertRow(row_pos)
                self.table.setItem(row_pos, 0, QtWidgets.QTableWidgetItem(str(row["Record Type"])))
                self.table.setItem(row_pos, 1, QtWidgets.QTableWidgetItem(str(row["Record Count"])))

            self.update_total_records()


def run_app():
    app = QtWidgets.QApplication(sys.argv)
    main_win = Overview()
    main_win.show()
    app.exec_()

if __name__ == "__main__":
    run_app()
