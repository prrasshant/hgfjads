import os
import time
import xlwings as xw
import psutil

# Get the current directory and create the file path
current_dir = os.getcwd()
OUT_FILE = os.path.join(current_dir, "ADP_Interactive_Dashboard.xlsx")

def kill_excel_processes():
    """Force close any Excel processes"""
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'] and 'excel' in proc.info['name'].lower():
                proc.kill()
                time.sleep(0.5)
    except:
        pass

def create_dashboard():
    """Create an absolutely stunning dashboard Excel file"""
    # Kill any existing Excel processes first
    kill_excel_processes()
    time.sleep(2)
    
    # Remove existing file if it exists
    if os.path.exists(OUT_FILE):
        try:
            os.remove(OUT_FILE)
            time.sleep(1)
        except:
            print("⚠️ Could not remove existing file. It might be locked.")
            return

    try:
        # Create a simple workbook first
        app = xw.App(visible=False)
        wb = app.books.add()
        sht = wb.sheets[0]
        sht.name = "Overview"
        
        print("✅ Basic workbook created successfully")

        # Create sample data sheets
        sample_sheets = {
            "Employees": [
                ["EmployeeID", "Name", "Department", "Salary"],
                ["E001", "John Doe", "HR", "50000"],
                ["E002", "Jane Smith", "Finance", "60000"]
            ],
            "Transactions": [
                ["TransactionID", "Date", "Amount", "Type"],
                ["T001", "2024-01-15", "1000", "Sale"]
            ],
            "Inventory": [
                ["ProductID", "Name", "Quantity", "Price"],
                ["P001", "Laptop", "50", "1200"]
            ]
        }
        
        # Create the sample sheets
        for sheet_name, data in sample_sheets.items():
            new_sheet = wb.sheets.add(sheet_name)
            for i, row in enumerate(data, start=1):
                for j, value in enumerate(row, start=1):
                    new_sheet.range(i, j).value = value

        # Setup premium Overview sheet formatting
        widths = [2, 22, 28, 2, 22, 18, 18, 18]
        for i, w in enumerate(widths, start=1):
            sht.api.Columns(i).ColumnWidth = w

        # Hide gridlines and headings for clean look
        app.api.ActiveWindow.DisplayGridlines = False
        app.api.ActiveWindow.DisplayHeadings = False

        # === EXPLOSIVE HEADER ===
        sht.range("B2:G3").merge()
        sht.range("B2").value = " PTD/YTD RESULTS - USA "
        sht.range("B2").api.Font.Size = 20
        sht.range("B2").api.Font.Bold = True
        sht.range("B2").api.Font.Color = 0xFFFFFF
        sht.range("B2").color = (30, 70, 140)  # Deep blue gradient start
        sht.range("B2").api.HorizontalAlignment = -4108
        sht.range("B2").api.VerticalAlignment = -4108
        
        # Header accent
        sht.range("B4:G4").merge()
        sht.range("B4").color = (255, 204, 0)  # Gold accent bar
        sht.range("B4").api.RowHeight = 3

        # === PREMIUM CLIENT INFO SECTION ===
        sht.range("B6:C10").color = (245, 249, 255)  # Ultra light blue
        sht.range("B6:C6").merge()
        sht.range("B6").value = "📋 CLIENT INFORMATION"
        sht.range("B6").api.Font.Size = 12
        sht.range("B6").api.Font.Bold = True
        sht.range("B6").api.Font.Color = 0x2F5496
        sht.range("B6").api.HorizontalAlignment = -4108
        
        # Modern icon labels with predefined values
        icon_labels = [
            "🔢 Client Number:", 
            "🏢 Company Name:", 
            "🌎 Country:", 
            "💬 Language:"
        ]
        
        predefined_values = ["", "", "USA", "English"]
        
        for i, (label, value) in enumerate(zip(icon_labels, predefined_values), start=7):
            sht.range(f"B{i}").value = label
            sht.range(f"B{i}").api.Font.Bold = True
            sht.range(f"B{i}").api.Font.Color = 0x44546A
            sht.range(f"C{i}").value = value
            sht.range(f"C{i}").color = (255, 255, 255)
            sht.range(f"C{i}").api.Borders.LineStyle = 1
            sht.range(f"C{i}").api.Borders.Weight = 2
            sht.range(f"C{i}").api.Borders.Color = 0xE3E8F0
            sht.range(f"C{i}").api.Font.Color = 0x2F5496

        # === PREMIUM CONTACT DETAILS SECTION ===
        sht.range("E6:G10").color = (245, 249, 255)
        sht.range("E6:G6").merge()
        sht.range("E6").value = "📞 CONTACT DETAILS"
        sht.range("E6").api.Font.Size = 12
        sht.range("E6").api.Font.Bold = True
        sht.range("E6").api.Font.Color = 0x2F5496
        sht.range("E6").api.HorizontalAlignment = -4108
        
        contact_icons = ["👤 Name:", "📱 Phone:", "📧 Email:", "🤝 ADP Contact:"]
        for i, label in enumerate(contact_icons, start=7):
            sht.range(f"E{i}").value = label
            sht.range(f"E{i}").api.Font.Bold = True
            sht.range(f"E{i}").api.Font.Color = 0x44546A
            sht.range(f"F{i}").value = ""
            sht.range(f"F{i}:G{i}").merge()
            sht.range(f"F{i}:G{i}").color = (255, 255, 255)
            sht.range(f"F{i}:G{i}").api.Borders.LineStyle = 1
            sht.range(f"F{i}:G{i}").api.Borders.Weight = 2
            sht.range(f"F{i}:G{i}").api.Borders.Color = 0xE3E8F0
            sht.range(f"F{i}:G{i}").api.Font.Color = 0x2F5496

        # === PREMIUM REPORTING PERIOD ===
        sht.range("B12:C14").color = (245, 249, 255)
        sht.range("B12:C12").merge()
        sht.range("B12").value = "📅 PERIOD"
        sht.range("B12").api.Font.Size = 12
        sht.range("B12").api.Font.Bold = True
        sht.range("B12").api.Font.Color = 0x2F5496
        sht.range("B12").api.HorizontalAlignment = -4108
        
        period_labels = ["📥 Date Received:", "📤 Date Processed:"]
        for i, label in enumerate(period_labels, start=13):
            sht.range(f"B{i}").value = label
            sht.range(f"B{i}").api.Font.Bold = True
            sht.range(f"B{i}").api.Font.Color = 0x44546A
            sht.range(f"C{i}").value = ""
            sht.range(f"C{i}").color = (255, 255, 255)
            sht.range(f"C{i}").api.Borders.LineStyle = 1
            sht.range(f"C{i}").api.Borders.Weight = 2
            sht.range(f"C{i}").api.Borders.Color = 0xE3E8F0
            sht.range(f"C{i}").api.Font.Color = 0x2F5496

        # === STUNNING TOTAL RECORDS CARD ===
        sht.range("B16:C17").color = (30, 70, 140)  # Dark blue card
        sht.range("B16:C17").merge()
        sht.range("B16").value = "📊 TOTAL RECORDS"
        sht.range("B16").api.Font.Bold = True
        sht.range("B16").api.Font.Size = 14
        sht.range("B16").api.Font.Color = 0xFFFFFF
        sht.range("B16").api.HorizontalAlignment = -4108
        sht.range("B16").api.VerticalAlignment = -4108
        
        # Add shadow effect with borders
        sht.range("B16:C17").api.Borders.LineStyle = 1
        sht.range("B16:C17").api.Borders.Weight = 4
        sht.range("B16:C17").api.Borders.Color = 0x1E468C

        # === EXPLOSIVE WORKBOOK ANALYTICS ===
        # Expand the analytics section to accommodate more sheets
        sht.range("E12:G50").color = (245, 249, 255)
        sht.range("E12:G12").merge()
        sht.range("E12").value = "📈 TRANSACTION OVERVIEW"
        sht.range("E12").api.Font.Size = 12
        sht.range("E12").api.Font.Bold = True
        sht.range("E12").api.Font.Color = 0x2F5496
        sht.range("E12").api.HorizontalAlignment = -4108
        
        # Premium table headers
        sht.range("E13").value = "📁 RECORD TYPE"
        sht.range("F13").value = "🔢 COUNT"
        sht.range("E13:F13").api.Font.Bold = True
        sht.range("E13:F13").color = (30, 70, 140)
        sht.range("E13:F13").api.Font.Color = 0xFFFFFF
        sht.range("E13:F13").api.HorizontalAlignment = -4108
        
        # Add modern borders to header
        sht.range("E13:F13").api.Borders.LineStyle = 1
        sht.range("E13:F13").api.Borders.Weight = 2
        sht.range("E13:F13").api.Borders.Color = 0x1E468C

        # === AUTO-UPDATING FORMULAS ===
        # Get all sheet names except Overview
        sheet_names = [sheet.name for sheet in wb.sheets if sheet.name != "Overview"]
        
        # Show ALL sheets (not just first 10)
        start_row = 14
        
        # Add scroll indicator at the top if we have many sheets
        if len(sheet_names) > 15:  # Only show indicator if we have many sheets
            sht.range(f"E{start_row-1}").value = "▲ Scroll to see all sheets ▲"
            sht.range(f"E{start_row-1}").api.Font.Size = 9
            sht.range(f"E{start_row-1}").api.Font.Color = 0x808080
            sht.range(f"E{start_row-1}").api.HorizontalAlignment = -4108
            sht.range(f"E{start_row-1}:F{start_row-1}").merge()
        
        # Add ALL sheet names and formulas (not just first 10)
        for i, sheet_name in enumerate(sheet_names, start=0):
            row = start_row + i
            sht.range(f"E{row}").value = f"📄 {sheet_name}"
            sht.range(f"E{row}").api.Font.Color = 0x44546A
            
            # Formula to count non-empty rows
            sht.range(f"F{row}").formula = f'=MAX(0,COUNTA({sheet_name}!A:A)-1)'
            sht.range(f"F{row}").api.Font.Bold = True
            sht.range(f"F{row}").api.Font.Color = 0x2F5496
            sht.range(f"F{row}").api.HorizontalAlignment = -4108
            
            # Modern alternating row colors
            if i % 2 == 0:
                sht.range(f"E{row}:F{row}").color = (255, 255, 255)
            else:
                sht.range(f"E{row}:F{row}").color = (250, 252, 255)
            
            # Premium borders
            sht.range(f"E{row}:F{row}").api.Borders.LineStyle = 1
            sht.range(f"E{row}:F{row}").api.Borders.Weight = 2
            sht.range(f"E{row}:F{row}").api.Borders.Color = 0xE3E8F0
        
        # Total records formula with premium styling
        sht.range("B16").formula = '="📊 Total: " & TEXT(SUM(F14:F100),"#,##0") & " records"'

        # Set calculation to automatic
        app.api.Calculation = -4105
        
        # === APPLY PROTECTION USING XLWINGS ===
        print("🔒 Applying protection using xlwings...")
        
        # First, unlock ALL cells
        sht.api.Cells.Locked = False
        
        # Now lock specific ranges (all labels, section titles, AND predefined values)
        labels_to_protect = [
            "B2", "B4",                    # Header
            "B6",                          # CLIENT INFORMATION (section title)
            "B7", "B8", "B9", "B10",       # Client Info labels
            "C9", "C10",                   # Predefined values (Country & Language) - PROTECTED
            "E6",                          # CONTACT DETAILS (section title)
            "E7", "E8", "E9", "E10",       # Contact Details labels
            "B12",                         # REPORTING PERIOD (section title)
            "B13", "B14",                  # Reporting Period labels
            "B16",                         # TOTAL RECORDS label
            "E12",                         # WORKBOOK ANALYTICS (section title)
            "E13", "F13"                   # Workbook Analytics labels
        ]
        
        # Add ALL sheet name labels to protection
        for i in range(len(sheet_names)):
            labels_to_protect.append(f"E{start_row + i}")
        
        # Add scroll indicator to protection if it exists
        if len(sheet_names) > 15:
            labels_to_protect.append(f"E{start_row-1}")
        
        # Lock all protected cells
        for cell_ref in labels_to_protect:
            try:
                sht.range(cell_ref).api.Locked = True
                print(f"🔒 Protected: {cell_ref}")
            except:
                pass
        
        # Define cells to keep EDITABLE (only specific input boxes)
        editable_cells = [
            # Input boxes (only these are editable)
            "C7", "C8",                    # Client Number & Company Name inputs
            "F7", "F8", "F9", "F10",      # Contact Details inputs
            "C13", "C14",                 # Reporting Period inputs
        ]
        
        # Add formula cells to editable list
        for i in range(len(sheet_names)):
            editable_cells.append(f"F{start_row + i}")
        
        # Keep editable cells unlocked using xlwings
        for cell_ref in editable_cells:
            try:
                sht.range(cell_ref).api.Locked = False
                print(f"✅ Editable: {cell_ref}")
            except:
                pass
        
        # Enable sheet protection with password
        sht.api.Protect(Password='adp123', DrawingObjects=True, Contents=True, Scenarios=True)
        
        sht.activate()
        app.api.ActiveWindow.Zoom = 90
        
        # Freeze panes to keep headers visible when scrolling
        sht.api.Activate()
        sht.api.Range("A13").Select()
        app.api.ActiveWindow.FreezePanes = True
        
        # Save the workbook
        wb.save(OUT_FILE)
        print("✅ Premium workbook saved successfully with protection")
        
        wb.close()
        app.quit()
        
        print("✅ EXPLOSIVE Dashboard created successfully! 💥")
        print(f"📍 Location: {OUT_FILE}")
        
        print("\n🔒 PROTECTION SUMMARY:")
        print("✅ ALL TEXT LABELS PROTECTED - Users cannot edit any labels, headers, or section titles")
        print("✅ PREDEFINED VALUES PROTECTED - Country (USA) and Language (English) are locked")
        print("✅ ONLY SPECIFIC INPUT BOXES EDITABLE - Users can only type in cells: C7, C8, F7-F10, C13-C14")
        print("✅ FORMULA CELLS EDITABLE - Auto-updating formulas will continue to work")
        print("🔑 Password: adp123")
        
        print("\n📜 SCROLL FEATURES:")
        print("✅ ALL sheets are visible (not limited to 10)")
        print("✅ Scroll indicator when many sheets exist")
        print("✅ Frozen headers for easy navigation")
        print(f"✅ Total of {len(sheet_names)} sheets displayed")
        
        print("\n🇺🇸 PREDEFINED VALUES:")
        print("✅ Country: USA (protected)")
        print("✅ Language: English (protected)")
        
    except Exception as e:
        print(f"❌ Error creating dashboard: {e}")
        try:
            app.quit()
        except:
            pass

if __name__ == "__main__":
    print("🚀 Creating ADP Interactive Dashboard...")
    create_dashboard()
