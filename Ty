# pyqt_to_excel.py
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtCore import Qt
import sys
import io
from PIL import Image
import xlsxwriter
import time

class ADPOverviewApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PTD/YTD Results - USA")
        self.setGeometry(100, 100, 1000, 600)
        self.setStyleSheet("background-color: #f4f4f4;")
        self.initUI()

    def initUI(self):
        layout = QtWidgets.QVBoxLayout(self)

        # Header
        header = QtWidgets.QLabel("PTD/YTD Results - USA")
        header.setFont(QtGui.QFont("Arial", 20, QtGui.QFont.Bold))
        header.setAlignment(Qt.AlignCenter)   # <-- use Qt.AlignCenter
        header.setStyleSheet("color: white; background-color: #2e7d32; padding: 15px;")
        layout.addWidget(header)

        container = QtWidgets.QFrame()
        container.setStyleSheet("background-color: white; border: 2px solid #cccccc; border-radius: 10px;")
        container_layout = QtWidgets.QGridLayout(container)

        # Groups helper
        def group(title, fields):
            g = QtWidgets.QGroupBox(title)
            fl = QtWidgets.QFormLayout()
            for f in fields:
                fl.addRow(f, QtWidgets.QLineEdit())
            g.setLayout(fl)
            return g

        client_info = group("Client Information", ["Client Number:", "Company Name:", "Country:", "Language:"])
        contact_info = group("Client Contact", ["Name:", "Phone Number:", "Email:", "ADP Contact:"])
        period_info = group("Period", ["Date Received:", "Date Processed:"])
        trans_info = group("Transaction Overview", ["Record Type:", "Record Count:", "Total Records:"])

        # Buttons
        button_frame = QtWidgets.QFrame()
        button_layout = QtWidgets.QHBoxLayout(button_frame)
        test_checkbox = QtWidgets.QCheckBox("Test Run (No Update)")
        upload_btn = QtWidgets.QPushButton("Create Upload File")
        import_btn = QtWidgets.QPushButton("Import Upload File")
        for btn in [upload_btn, import_btn]:
            btn.setStyleSheet("background-color: #0078D7; color: white; font-weight: bold; padding: 10px;")
        button_layout.addWidget(test_checkbox)
        button_layout.addStretch()
        button_layout.addWidget(upload_btn)
        button_layout.addWidget(import_btn)

        container_layout.addWidget(client_info, 0, 0)
        container_layout.addWidget(contact_info, 0, 1)
        container_layout.addWidget(period_info, 1, 0)
        container_layout.addWidget(trans_info, 1, 1)
        container_layout.addWidget(button_frame, 2, 0, 1, 2)

        layout.addWidget(container)


def save_gui_as_excel(output_filename="ADP_Dashboard.xlsx"):
    # 1) Create the Qt app and GUI
    app = QtWidgets.QApplication(sys.argv)
    gui = ADPOverviewApp()
    gui.show()

    # 2) Let Qt render the widget (process events). small sleep helps on some systems.
    app.processEvents()
    QtCore.QThread.msleep(150)   # 150ms; increase slightly if the screenshot is blank

    # 3) Grab GUI as image (QPixmap)
    pixmap = gui.grab()

    # 4) Save QPixmap into a QBuffer as PNG and convert to bytes
    buffer = QtCore.QBuffer()
    buffer.open(QtCore.QBuffer.ReadWrite)
    pixmap.save(buffer, "PNG")
    qbyte_array = buffer.data()
    img_bytes = bytes(qbyte_array)   # convert QByteArray -> bytes

    # 5) Load into PIL (optional) to check or manipulate (here we just use as-is)
    image = Image.open(io.BytesIO(img_bytes))

    # 6) Create Excel and insert the image
    workbook = xlsxwriter.Workbook(output_filename)
    worksheet = workbook.add_worksheet("Overview")

    # Hide gridlines for a dashboard look
    worksheet.hide_gridlines(2)

    # Optionally set column widths/row heights to ensure image fits nicely.
    # We'll insert image at A1 and let it size via scale if needed.
    # Insert from bytes
    img_stream = io.BytesIO()
    image.save(img_stream, format="PNG")
    img_stream.seek(0)

    worksheet.insert_image('A1', 'dashboard.png', {'image_data': img_stream})

    workbook.close()
    print(f"âœ… Excel dashboard saved to: {output_filename}")

    # 7) Close the GUI app cleanly
    gui.close()
    app.quit()


if __name__ == "__main__":
    save_gui_as_excel()
