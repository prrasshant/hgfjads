import os
import time
import xlwings as xw
from openpyxl import load_workbook

OUT_FILE = os.path.abspath("ADP_Interactive_Dashboard.xlsx")

def build_xlsm():
    if os.path.exists(OUT_FILE):
        try:
            os.remove(OUT_FILE)
        except Exception as e:
            print("Could not remove existing file:", e)
            return

    app = xw.App(visible=False)
    try:
        wb = app.books.add()
        
        # Create Overview sheet first
        sht = wb.sheets[0]
        sht.name = "Overview"

        # Check if TransactionData sheet exists, if not create it with sample data
        try:
            data_sht = wb.sheets("TransactionData")
            print("TransactionData sheet already exists, will use existing data")
        except:
            print("Creating TransactionData sheet (empty, no predefined list values)")
            data_sht = wb.sheets.add("TransactionData")
            data_sht.visible = False
            # Keep it empty ‚Äì no predefined values
        
        # Set column widths for better layout
        widths = [2, 18, 25, 2, 18, 18, 15, 15]
        for i, w in enumerate(widths, start=1):
            sht.api.Columns(i).ColumnWidth = w

        # Set row heights for better spacing
        row_heights = {
            2: 30, 3: 30,  # Title rows
            5: 25, 6: 22, 7: 22, 8: 22, 9: 22,  # Client Info and Contact rows
            11: 25, 12: 22, 13: 22, 14: 22,  # Period headers
            15: 25,  # Total Records section
            17: 120  # Space for listbox
        }
        for row, height in row_heights.items():
            sht.api.Rows(row).RowHeight = height

        app.api.ActiveWindow.DisplayGridlines = False
        app.api.ActiveWindow.DisplayHeadings = False

        # Title - Centered and prominent
        header_color = (47, 84, 150)  # Darker blue for professional look
        sht.range("B2:G3").merge()
        sht.range("B2").value = "ADP - PTD/YTD Results - USA"
        sht.range("B2").api.Font.Size = 20
        sht.range("B2").api.Font.Bold = True
        sht.range("B2").color = header_color
        sht.range("B2").api.Font.Color = 0xFFFFFF
        sht.range("B2").api.HorizontalAlignment = -4108  # Center
        sht.range("B2").api.VerticalAlignment = -4108  # Center
        sht.range("B2").api.BorderAround(1, 4)  # Medium border

        # Client Info - Clean and organized
        client_info_color = (240, 248, 255)  # Very light blue
        sht.range("B5:C9").color = client_info_color
        sht.range("B5:C5").merge(); sht.range("B5").value = "üë§ Client Information"
        sht.range("B5").api.Font.Size = 12
        sht.range("B5").api.Font.Bold = True
        sht.range("B5").api.Font.Color = 0x2F5496  # Dark blue text
        sht.range("B5").api.HorizontalAlignment = -4108  # Center
        
        # Client info labels and values
        labels = ["Client Number:", "Company Name:", "Country:", "Language:"]
        values = ["", "", "USA", "English"]
        for i, (label, value) in enumerate(zip(labels, values), start=6):
            sht.range(f"B{i}").value = label
            sht.range(f"B{i}").api.Font.Bold = True
            sht.range(f"C{i}").value = value
            if value:
                sht.range(f"C{i}").api.Font.Color = 0x2F5496

        # Contact - Matching style to Client Info
        sht.range("E5:G9").color = client_info_color
        sht.range("E5:G5").merge(); sht.range("E5").value = "üìû Contact Details"
        sht.range("E5").api.Font.Size = 12
        sht.range("E5").api.Font.Bold = True
        sht.range("E5").api.Font.Color = 0x2F5496
        sht.range("E5").api.HorizontalAlignment = -4108  # Center
        
        # Contact labels
        contact_labels = ["Name:", "Phone Number:", "Email:", "ADP Contact:"]
        for i, label in enumerate(contact_labels, start=6):
            sht.range(f"E{i}").value = label
            sht.range(f"E{i}").api.Font.Bold = True
            sht.range(f"F{i}").value = ""
            sht.range(f"F{i}:G{i}").merge()

        # Period - Clean section
        period_color = (240, 248, 255)
        sht.range("B11:C13").color = period_color
        sht.range("B11:C11").merge(); sht.range("B11").value = "üóìÔ∏è Period"
        sht.range("B11").api.Font.Size = 12
        sht.range("B11").api.Font.Bold = True
        sht.range("B11").api.Font.Color = 0x2F5496
        sht.range("B11").api.HorizontalAlignment = -4108  # Center
        
        sht.range("B12").value = "Date Received:"
        sht.range("B12").api.Font.Bold = True
        sht.range("C12").value = ""
        
        sht.range("B13").value = "Date Processed:"
        sht.range("B13").api.Font.Bold = True
        sht.range("C13").value = ""

        # Total Records Section - placeholder
        total_records_color = (220, 230, 245)
        sht.range("B15:C15").color = total_records_color
        sht.range("B15:C15").merge()
        sht.range("B15").value = "Total Records: Calculating..."
        sht.range("B15").api.Font.Bold = True
        sht.range("B15").api.Font.Size = 12
        sht.range("B15").api.Font.Color = 0x2F5496
        sht.range("B15").api.HorizontalAlignment = -4108  # Center

        # Transaction Overview section
        transaction_color = (240, 248, 255)
        sht.range("E11:G17").color = transaction_color
        sht.range("E11:G11").merge(); sht.range("E11").value = "üßæ Transaction Overview"
        sht.range("E11").api.Font.Size = 12
        sht.range("E11").api.Font.Bold = True
        sht.range("E11").api.Font.Color = 0x2F5496
        sht.range("E11").api.HorizontalAlignment = -4108  # Center
        
        # Add a subtle border around all sections
        for range_addr in ["B5:C9", "E5:G9", "B11:C13", "B15:C15", "E11:G17"]:
            sht.range(range_addr).api.BorderAround(1, 1)  # Thin border

        # Save and close to switch to openpyxl for locking
        wb.save(OUT_FILE)
        wb.close()
    finally:
        app.quit()

    time.sleep(0.5)

    # Lock cells with openpyxl, unlock the editable ones
    wb2 = load_workbook(OUT_FILE)
    ws = wb2["Overview"]
    for row in ws.iter_rows():
        for cell in row:
            cell.protection = cell.protection.copy(locked=True)
    editable_cells = ["C6","C7","F6","F7","F8","F9","C12","C13"]
    for cell_ref in editable_cells:
        ws[cell_ref].protection = ws[cell_ref].protection.copy(locked=False)
    if "TransactionData" in wb2.sheetnames:
        ws_data = wb2["TransactionData"]
        for row in ws_data.iter_rows():
            for cell in row:
                cell.protection = cell.protection.copy(locked=False)
    wb2.save(OUT_FILE)
    wb2.close()

    time.sleep(0.5)

    # Final pass: build dynamic ListBox & totals
    app3 = xw.App(visible=True)
    try:
        book = app3.books.open(OUT_FILE)
        sht = book.sheets["Overview"]

        # Unprotect to modify controls
        try:
            sht.api.Unprotect("adp123")
        except:
            pass

        # Remove any existing ListBox named lstTransactions to avoid duplicates
        try:
            sht.api.OLEObjects("lstTransactions").Delete()
        except:
            pass

        # Clear any printed data in the transaction area
        sht.range("E12:G100").clear()

        # Build dynamic data: list all sheets except 'Overview'
        data_items = []  # list of [Record Type, Record Count]
        total_row_sum = 0

        for ws in book.sheets:
            sheet_name = ws.name
            if sheet_name == "Overview":
                continue  # don't count the dashboard itself

            # Get UsedRange and count rows that have any non-empty cell
            ur = ws.api.UsedRange
            nrows = int(ur.Rows.Count)
            ncols = int(ur.Columns.Count)
            start_row = int(ur.Row)
            start_col = int(ur.Column)

            # If the sheet is completely empty, UsedRange can still be 1x1 with None
            values = ws.range((start_row, start_col)).resize(nrows, ncols).value
            # Normalize values to 2D list
            if nrows == 1 and ncols == 1:
                values = [[values]]

            non_empty_rows = 0
            for r in values:
                # r can be scalar if dimension weirdness; normalize
                row_vals = r if isinstance(r, (list, tuple)) else [r]
                if any(v not in (None, "") for v in row_vals):
                    non_empty_rows += 1

            data_items.append([sheet_name, non_empty_rows])
            total_row_sum += non_empty_rows

        # Create the ActiveX ListBox
        listbox_cell = sht.range("E12")
        left = listbox_cell.left
        top = listbox_cell.top
        width = sht.range("E11:G11").width - 5
        height = 100

        listbox = sht.api.OLEObjects().Add(ClassType="Forms.ListBox.1",
                                           Left=left, Top=top,
                                           Width=width, Height=height)
        listbox.Name = "lstTransactions"
        listbox.Object.MultiSelect = 0
        listbox.Object.ColumnCount = 2
        listbox.Object.ColumnWidths = "200;80"
        listbox.Object.IntegralHeight = False
        listbox.Object.ColumnHeads = False  # no predefined header row
        listbox.Object.List = data_items      # <-- dynamic data only (no headers)
        listbox.Object.ScrollBars = 3
        listbox.Object.BackColor = 0xF0F8FF
        listbox.Object.BorderColor = 0x2F5496
        listbox.Object.BorderStyle = 1
        listbox.Object.Font.Size = 10
        listbox.Object.Font.Name = "Calibri"

        # Total outside: number of record types (items in list)
        total_record_types = len(data_items)
        sht.range("B15").value = f"Total Records: {total_record_types}"
        sht.range("B15").api.HorizontalAlignment = -4108  # center

        # If you prefer the SUM of all row counts instead, comment the line above and use:
        # sht.range("B15").value = f"Total Rows Across Sheets: {total_row_sum}"

        # Re-apply protections
        sht.api.Protect("adp123",
                        DrawingObjects=True,
                        Contents=True,
                        Scenarios=True,
                        UserInterfaceOnly=True,
                        AllowFormattingCells=False,
                        AllowFormattingColumns=False,
                        AllowFormattingRows=False,
                        AllowInsertingColumns=False,
                        AllowInsertingRows=False,
                        AllowInsertingHyperlinks=False,
                        AllowDeletingColumns=False,
                        AllowDeletingRows=False,
                        AllowSorting=False,
                        AllowFiltering=False,
                        AllowUsingPivotTables=False)

        # Protect workbook structure
        book.api.Protect("adp123", Structure=True)

        # Protect TransactionData sheet but allow editing content (cells are unlocked)
        try:
            data_sht = book.sheets["TransactionData"]
            data_sht.api.Protect("adp123", Contents=True, UserInterfaceOnly=True)
        except:
            pass

        book.save(OUT_FILE)
        book.close()

    except Exception as e:
        print(f"Error: {e}")
    finally:
        app3.quit()

    print("‚úÖ ADP_Interactive_Dashboard.xlsx created at:", OUT_FILE)
    print("üîí STRONG PROTECTION ENABLED (password: adp123)")
    print("üìù Editable: C6,C7,F6:F9,C12,C13 and all cells in TransactionData")
    print("üìã ListBox now lists all sheets (except Overview) with their non-empty row counts.")
    print("üî¢ 'Total Records' shows the number of record types (sheets) in the ListBox.")

if __name__ == "__main__":
    build_xlsm()
