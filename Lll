import sys
import pandas as pd
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTableWidget, QTableWidgetItem, QFileDialog, QHeaderView, QFrame
)
from PyQt5.QtGui import QFont, QPalette, QColor
from PyQt5.QtCore import Qt


class ExcelGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Data Analytics Dashboard")
        self.setGeometry(200, 100, 1100, 700)

        # Set background gradient
        palette = QPalette()
        gradient_color = QColor("#f7f8fa")
        palette.setColor(QPalette.Window, gradient_color)
        self.setPalette(palette)

        self.df = None
        self.initUI()

    def initUI(self):
        main_layout = QVBoxLayout()

        # ======= Title =======
        title = QLabel("PTD / YTD Results - USA")
        title.setFont(QFont("Segoe UI", 22, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #222; border-bottom: 2px solid #555; padding-bottom: 10px;")
        main_layout.addWidget(title)

        # ======= Static Info Row =======
        static_layout = QHBoxLayout()

        country_label = QLabel("Country: USA")
        country_label.setFont(QFont("Segoe UI", 12))
        language_label = QLabel("Language: English")
        language_label.setFont(QFont("Segoe UI", 12))
        adp_contact_label = QLabel("ADP Contact: John Doe")
        adp_contact_label.setFont(QFont("Segoe UI", 12))

        for lbl in [country_label, language_label, adp_contact_label]:
            lbl.setStyleSheet("color: #444; padding: 6px; background-color: #e9ecef; border-radius: 5px;")
            static_layout.addWidget(lbl)

        main_layout.addLayout(static_layout)

        # ======= Transaction Overview =======
        section_label = QLabel("Transaction Overview")
        section_label.setFont(QFont("Segoe UI", 16, QFont.Bold))
        section_label.setAlignment(Qt.AlignLeft)
        section_label.setStyleSheet("color: #333; margin-top: 20px;")
        main_layout.addWidget(section_label)

        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Record Type", "Record Count"])
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.setAlternatingRowColors(True)
        self.table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                alternate-background-color: #f6f6f6;
                gridline-color: #ddd;
                font-size: 13px;
            }
            QHeaderView::section {
                background-color: #0078D7;
                color: white;
                font-weight: bold;
                font-size: 14px;
                padding: 6px;
            }
            QTableWidget::item:hover {
                background-color: #dceeff;
            }
        """)
        main_layout.addWidget(self.table)

        # Total Records Label
        self.total_records_label = QLabel("Total Records: 0")
        self.total_records_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        self.total_records_label.setStyleSheet("color: #0078D7; padding: 5px;")
        main_layout.addWidget(self.total_records_label)

        # ======= Buttons =======
        btn_layout = QHBoxLayout()

        self.load_btn = QPushButton("Activate Excel Sheet")
        self.load_btn.setFont(QFont("Segoe UI", 12))
        self.load_btn.setStyleSheet("""
            QPushButton {
                background-color: #0078D7;
                color: white;
                padding: 8px 16px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #005fa3;
            }
        """)
        self.load_btn.clicked.connect(self.load_excel)
        btn_layout.addWidget(self.load_btn)

        main_layout.addLayout(btn_layout)
        self.setLayout(main_layout)

    def load_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Open Excel File", "", "Excel Files (*.xlsx *.xls)")
        if file_path:
            self.df = pd.read_excel(file_path)
            self.populate_transaction_table()

    def populate_transaction_table(self):
        if self.df is not None and 'Record Type' in self.df.columns:
            record_counts = self.df['Record Type'].value_counts().reset_index()
            record_counts.columns = ['Record Type', 'Record Count']

            self.table.setRowCount(len(record_counts))
            for row, (rtype, count) in enumerate(record_counts.values):
                self.table.setItem(row, 0, QTableWidgetItem(str(rtype)))
                self.table.setItem(row, 1, QTableWidgetItem(str(count)))

            self.total_records_label.setText(f"Total Records: {len(record_counts)}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ExcelGUI()
    window.show()
    sys.exit(app.exec_())
