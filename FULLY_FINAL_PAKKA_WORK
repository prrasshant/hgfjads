import os
import time
import xlwings as xw
from openpyxl import load_workbook
import psutil

# Get the current directory and create the file path
current_dir = os.getcwd()
OUT_FILE = os.path.join(current_dir, "ADP_Interactive_Dashboard.xlsx")

def kill_excel_processes():
    """Force close any Excel processes"""
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'] and 'excel' in proc.info['name'].lower():
                proc.kill()
                time.sleep(0.5)
    except:
        pass

def create_dashboard():
    """Create the dashboard Excel file with auto-updating formulas"""
    # Kill any existing Excel processes first
    kill_excel_processes()
    time.sleep(2)
    
    if os.path.exists(OUT_FILE):
        try:
            os.remove(OUT_FILE)
            time.sleep(1)
        except:
            print("‚ö†Ô∏è Could not remove existing file. It might be locked.")
            kill_excel_processes()
            time.sleep(2)
            try:
                os.remove(OUT_FILE)
            except:
                print("‚ùå Cannot remove existing file. Please close Excel and try again.")
                return

    app = xw.App(visible=False)
    try:
        wb = app.books.add()
        sht = wb.sheets[0]
        sht.name = "Overview"

        # Create sample data sheets
        sample_sheets = {
            "Employees": [
                ["EmployeeID", "Name", "Department", "Salary"],
                ["E001", "John Doe", "HR", "50000"],
                ["E002", "Jane Smith", "Finance", "60000"],
                ["E003", "Mike Johnson", "IT", "55000"],
                ["E004", "Sarah Wilson", "Marketing", "52000"]
            ],
            "Transactions": [
                ["TransactionID", "Date", "Amount", "Type"],
                ["T001", "2024-01-15", "1000", "Sale"],
                ["T002", "2024-01-16", "2500", "Sale"],
                ["T003", "2024-01-17", "500", "Refund"]
            ],
            "Inventory": [
                ["ProductID", "Name", "Quantity", "Price"],
                ["P001", "Laptop", "50", "1200"],
                ["P002", "Mouse", "200", "25"],
                ["P003", "Keyboard", "150", "45"],
                ["P004", "Monitor", "75", "300"],
                ["P005", "Headset", "100", "80"]
            ]
        }
        
        # Create the sample sheets
        for sheet_name, data in sample_sheets.items():
            new_sheet = wb.sheets.add(sheet_name)
            for i, row in enumerate(data, start=1):
                for j, value in enumerate(row, start=1):
                    new_sheet.range(i, j).value = value
            new_sheet.range("1:1").api.Font.Bold = True
            new_sheet.range("1:1").color = (240, 248, 255)

        # Setup Overview sheet formatting
        widths = [2, 18, 25, 2, 18, 18, 15, 15]
        for i, w in enumerate(widths, start=1):
            sht.api.Columns(i).ColumnWidth = w

        row_heights = {2: 30, 3: 30, 5: 25, 6: 22, 7: 22, 8: 22, 9: 22,
                      11: 25, 12: 22, 13: 22, 14: 22, 15: 25, 17: 150}
        for row, height in row_heights.items():
            sht.api.Rows(row).RowHeight = height

        app.api.ActiveWindow.DisplayGridlines = False
        app.api.ActiveWindow.DisplayHeadings = False

        # === TITLE ===
        header_color = (47, 84, 150)
        sht.range("B2:G3").merge()
        sht.range("B2").value = "ADP - Automated Workbook Analytics"
        sht.range("B2").api.Font.Size = 20
        sht.range("B2").api.Font.Bold = True
        sht.range("B2").color = header_color
        sht.range("B2").api.Font.Color = 0xFFFFFF
        sht.range("B2").api.HorizontalAlignment = -4108
        sht.range("B2").api.VerticalAlignment = -4108
        sht.range("B2").api.BorderAround(1, 4)

        # === CLIENT INFO ===
        client_info_color = (240, 248, 255)
        sht.range("B5:C9").color = client_info_color
        sht.range("B5:C5").merge()
        sht.range("B5").value = "üë§ Client Information"
        sht.range("B5").api.Font.Size = 12
        sht.range("B5").api.Font.Bold = True
        sht.range("B5").api.Font.Color = 0x2F5496
        sht.range("B5").api.HorizontalAlignment = -4108
        
        # Labels (protected) - Input boxes (editable)
        labels = ["Client Number:", "Company Name:", "Country:", "Language:"]
        for i, label in enumerate(labels, start=6):
            sht.range(f"B{i}").value = label
            sht.range(f"B{i}").api.Font.Bold = True
            sht.range(f"C{i}").value = ""  # Input box - will be editable

        # === CONTACT DETAILS ===
        sht.range("E5:G9").color = client_info_color
        sht.range("E5:G5").merge()
        sht.range("E5").value = "üìû Contact Details"
        sht.range("E5").api.Font.Size = 12
        sht.range("E5").api.Font.Bold = True
        sht.range("E5").api.Font.Color = 0x2F5496
        sht.range("E5").api.HorizontalAlignment = -4108
        
        # Labels (protected) - Input boxes (editable)
        contact_labels = ["Name:", "Phone Number:", "Email:", "ADP Contact:"]
        for i, label in enumerate(contact_labels, start=6):
            sht.range(f"E{i}").value = label
            sht.range(f"E{i}").api.Font.Bold = True
            sht.range(f"F{i}").value = ""  # Input box - will be editable
            sht.range(f"F{i}:G{i}").merge()

        # === PERIOD ===
        period_color = (240, 248, 255)
        sht.range("B11:C13").color = period_color
        sht.range("B11:C11").merge()
        sht.range("B11").value = "üóìÔ∏è Period"
        sht.range("B11").api.Font.Size = 12
        sht.range("B11").api.Font.Bold = True
        sht.range("B11").api.Font.Color = 0x2F5496
        sht.range("B11").api.HorizontalAlignment = -4108
        
        # Labels (protected) - Input boxes (editable)
        sht.range("B12").value = "Date Received:"
        sht.range("B12").api.Font.Bold = True
        sht.range("C12").value = ""  # Input box - will be editable
        
        sht.range("B13").value = "Date Processed:"
        sht.range("B13").api.Font.Bold = True
        sht.range("C13").value = ""  # Input box - will be editable

        # === TOTAL RECORDS ===
        total_records_color = (220, 230, 245)
        sht.range("B15:C15").color = total_records_color
        sht.range("B15:C15").merge()
        sht.range("B15").api.Font.Bold = True
        sht.range("B15").api.Font.Size = 12
        sht.range("B15").api.Font.Color = 0x2F5496
        sht.range("B15").api.HorizontalAlignment = -4108

        # === WORKBOOK ANALYTICS ===
        analytics_color = (240, 248, 255)
        sht.range("E11:G17").color = analytics_color
        sht.range("E11:G11").merge()
        sht.range("E11").value = "üìä Workbook Analytics"
        sht.range("E11").api.Font.Size = 12
        sht.range("E11").api.Font.Bold = True
        sht.range("E11").api.Font.Color = 0x2F5496
        sht.range("E11").api.HorizontalAlignment = -4108
        
        # Create table headers
        sht.range("E12").value = "Record Type"
        sht.range("F12").value = "Record Count"
        sht.range("E12:F12").api.Font.Bold = True
        sht.range("E12:F12").color = (220, 230, 245)
        sht.range("E12:F12").api.HorizontalAlignment = -4108
        
        # Create named ranges for dynamic counting
        create_named_ranges(wb)
        
        # Use Excel formulas for auto-updating counts
        sheet_names = ["Employees", "Transactions", "Inventory"]
        for i, sheet_name in enumerate(sheet_names, start=1):
            sht.range(f"E{12 + i}").value = sheet_name
            # Formula to count non-empty rows in each sheet (excluding header)
            sht.range(f"F{12 + i}").formula = f'=COUNTA({sheet_name}!A:A)-1'
        
        # Total records formula
        sht.range("B15").formula = '="Total Records: " & SUM(F13:F15)'
        
        # Add borders
        for range_addr in ["B5:C9", "E5:G9", "B11:C13", "B15:C15", "E11:G17"]:
            sht.range(range_addr).api.BorderAround(1, 1)
        
        table_end_row = 12 + len(sheet_names)
        sht.range(f"E12:F{table_end_row}").api.BorderAround(1, 1)
        for row in range(12, table_end_row + 1):
            sht.range(f"E{row}:F{row}").api.Borders(9).Weight = 1

        # Instructions - Show that it's auto-updating
        sht.range("H12").value = "üîÑ Auto-Update Feature:"
        sht.range("H13").value = "‚Ä¢ Real-time updates"
        sht.range("H14").value = "‚Ä¢ No macros needed"
        sht.range("H15").value = "‚Ä¢ Always current data!"
        
        sht.range("H12:H15").api.Font.Bold = True
        sht.range("H12:H15").color = (255, 255, 225)
        
        sht.activate()
        app.api.ActiveWindow.Zoom = 85
        
        wb.save(OUT_FILE)
        wb.close()
        
        print("‚úÖ Dashboard created successfully!")
        print(f"üìç Location: {OUT_FILE}")
        
    except Exception as e:
        print(f"‚ùå Error creating dashboard: {e}")
    finally:
        app.quit()

    # Setup protection
    setup_cell_protection()

def create_named_ranges(wb):
    """Create named ranges for better formula management"""
    try:
        # This is just for demonstration - Excel formulas will handle the counting
        pass
    except Exception as e:
        print(f"Note: Named ranges not created - {e}")

def setup_cell_protection():
    """Set up cell protection - only protect labels, keep formulas editable"""
    try:
        kill_excel_processes()
        time.sleep(2)
        
        # Use openpyxl for protection
        wb = load_workbook(OUT_FILE)
        ws = wb["Overview"]
        
        # First, unlock ALL cells
        for row in ws.iter_rows():
            for cell in row:
                cell.protection = cell.protection.copy(locked=False)
        
        # Define cells that should be protected (locked) - ONLY LABELS
        protected_cells = [
            # Main title
            "B2", "B3",
            
            # Client Information section
            "B5", "B6", "B7", "B8", "B9",
            
            # Contact Details section  
            "E5", "E6", "E7", "E8", "E9",
            
            # Period section
            "B11", "B12", "B13",
            
            # Total Records section - protect the label part
            "B15",
            
            # Workbook Analytics section
            "E11", "E12", "F12",
            
            # Instructions
            "H12", "H13", "H14", "H15",
            
            # Sheet names in table (keep formulas unlocked)
            "E13", "E14", "E15"
        ]
        
        # Lock the protected cells
        for cell_ref in protected_cells:
            if cell_ref in ws:
                ws[cell_ref].protection = ws[cell_ref].protection.copy(locked=True)
        
        # Define editable cells (input boxes and formulas) - unlock them
        editable_cells = [
            "C6", "C7", "C8", "C9",  # Client info input boxes
            "F6", "F7", "F8", "F9",  # Contact details input boxes
            "C12", "C13",            # Date input boxes
            "F13", "F14", "F15"      # Formula cells (record counts)
        ]
        
        for cell_ref in editable_cells:
            if cell_ref in ws:
                ws[cell_ref].protection = ws[cell_ref].protection.copy(locked=False)
        
        # Enable sheet protection with password
        ws.protection.enable()
        ws.protection.password = 'adp123'
        ws.protection.sheet = True
        
        # Save and close
        wb.save(OUT_FILE)
        wb.close()
        
        print("üîí Protection successfully applied!")
        print("üìä Formulas will auto-update in real-time!")
        print("üîë Password 'adp123' required to edit protected cells")
        
    except Exception as e:
        print(f"‚ùå Error setting protection: {e}")

if __name__ == "__main__":
    print("üöÄ Creating ADP Interactive Dashboard...")
    print("üìä Using Excel formulas for auto-updating (no macros needed)")
    create_dashboard()
    
    print("\n" + "="*60)
    print("üéØ KEY FEATURES:")
    print("‚úÖ NO MACROS REQUIRED - Completely macro-free")
    print("‚úÖ AUTO-UPDATING - Uses Excel formulas for real-time updates")
    print("‚úÖ USER-FRIENDLY - Client doesn't need to do anything")
    print("‚úÖ ALWAYS CURRENT - Data updates automatically when sheets change")
    print("")
    print("üîí Protected elements (need password 'adp123'):")
    print("   - All labels and section headers")
    print("   - Sheet names in the table")
    print("")
    print("üìù Editable elements (no password needed):")
    print("   - Input boxes for client data")
    print("   - Record count formulas (auto-update)")
